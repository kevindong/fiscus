extends ../layout

block content
  if validChart
    .card.mb-3
      .card-body
        canvas(id='normChart')
  else
    br


  .card.mb-3
    .card-body
      h5.card-title Holdings
      .table-responsive
        table.table.mb-0
          thead
            tr
              th(scope="col") Ticker
              th(scope="col") Last
              th(scope="col") Change
              th(scope="col") Shares
              th(scope="col") Cost
              th(scope="col") Value
              th(scope="col") Gain
              th(scope="col") Gain %
              th(scope="col") Day's gain
          tbody
            - totalChange = 0
            - totalCost = 0
            - totalValue = 0
            - totalGain = 0
            - totalGainPct = 0
            - totalDaysGain = 0
            each security in currentSecurities
              tr
                td #{ security.ticker }
                td #{ security.last }
                - percent = Math.round(security.change / security.last * 100, 2)
                if security.change > 0
                  td.green +#{ security.change } (+#{ percent }%)
                else
                  td.red #{ security.change } (#{ percent }%)
                td #{ security.shares }
                td #{ security.cost }
                td #{ security.value }
                if security.gain > 0
                  td.green +#{ security.gain }
                else
                  td.red #{ security.gain }
                if security.pctGain > 0
                  td.green +#{ security.pctGain }%
                else
                  td.red #{ security.pctGain }%
                if security.dayGain > 0
                  td.green +#{ security.dayGain }
                else
                  td.red #{ security.dayGain }
              - totalChange += security.change * security.shares
              - totalCost += security.cost * 1
              - totalValue += security.value * 1
              - totalGain += security.gain * 1
              - totalDaysGain += security.dayGain * 1
            - totalChange = Math.round(totalChange * 100) / 100
            - totalCost = Math.round(totalCost * 100) / 100
            - totalValue = Math.round(totalValue * 100) / 100
            - totalGain = Math.round(totalGain * 100) / 100
            - if (totalCost != 0) totalGainPct = Math.round((totalValue / totalCost - 1) * 10000) / 100
            - totalDaysGain = Math.round(totalDaysGain * 100) / 100
            tr
              td Total:
              td
              if totalChange > 0
                td.green #{ totalChange }
              else
                td.red #{ totalChange }
              td
              td #{ totalCost }
              td #{ totalValue }
              if totalGain > 0
                td.green #{ totalGain }
              else
                td.red #{ totalGain }
              if totalGainPct > 0
                td.green #{ totalGainPct }%
              else
                td.red #{ totalGainPct }%
              if totalDaysGain > 0
                td.green #{ totalDaysGain }
              else
                td.red #{ totalDaysGain }

  .card
    .card-body
      h5.card-title Transactions
      .table-responsive
        table.table.mb-0
          thead
            tr
              th(scope="col") Name
              th(scope="col") Action
              th(scope="col") Ticker
              th(scope="col") Date
              th(scope="col") Used Cash?
              th.text-right(scope="col") Value
              th.text-right(scope="col") Shares
          tbody
            each transaction in transactions
              tr
                td #{securityNames[transaction.ticker]}
                td #{transaction.type}
                td #{transaction.ticker === "$" ? "" : transaction.ticker}
                td #{transaction.dateTransacted.toISOString().substring(0,10)}
                td #{transaction.ticker === "$" ? "" : (transaction.deductFromCash ? 'Yes' : 'No')}
                td.text-right #{transaction.value}
                td.text-right #{transaction.ticker === "$" ? "" : transaction.numShares}
    .card-footer.text-right
      a.btn.btn-primary.mr-1(href=`/portfolio/${portfolioId}/transaction/edit`) Add Transaction
      a.btn.btn-primary.mr-1(href="/portfolio/"+portfolioId+"/transactions") Edit Transactions

  hr
  if news && news.length > 0
    h3.mt-3 News about securities in your portfolio
    hr
    .row
      each article in news
        .col-md-4
          .card(style={margin: '10px 0 10px 0'})
            .card-body
              h5.card-title
                a(style={color: 'inherit'},href=article.url) #{article.headline}
              h6.card-subtitle.text-muted #{article.datetime.substring(0, 10)}
              hr
              p.card-text #{article.summary}
              a.card-link(href=article.url) Link to article
      if user && user.darkTheme
        script.
          var darkMode = true;
      else
        script.
          var darkMode = false;
      script.
        window.onload = function () {
          var ctx = document.getElementById("normChart").getContext('2d');
          Chart.defaults.global.defaultFontColor = darkMode ? 'rgba(255,255,255,0.9)' : 'rgba(0,0,0,0.9)';
          var myChart = new Chart(ctx, {
            type: 'line',
            data: {
              labels: ["Indices"],
              datasets: [{
                label: 'Portfolio Value',
                fill: false,
                lineTension: 0,
                data: !{portfolioChart},
                borderColor: [
                  !{chartColor}
                ],
                backgroundColor: [
                  'rgba(255,138,101, 0.3)'
                ],
                borderWidth: 2,
                pointRadius: 0
              }, ]
            },
            options: {
              spanGaps: true,
              title: {
                display: true,
                text: 'Portfolio Value'
              },
              scales: {
                xAxes: [{
                  type: 'time',
                  display: true,
                  scaleLabel: {
                    display: true,
                    labelString: "Date"
                  }
                }],
                yAxes: [{
                  ticks: {
                    beginAtZero: true
                  },
                  scaleLabel: {
                    display: true,
                    labelString: "Value ($)"
                  }
                }]
              }
            }
          })
        }



