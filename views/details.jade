extends layout

block content
    .row
        .col-md-1.details-img
            img(src=logoUrl, onerror="this.style.display='none'", style={'min-width':'100%','max-width':'100%','max-height':'100%'})
        .col-md-11
            h3 #{name} - $#{formatMoney(lastPrice)}, 
                if (change > 0)
                    span(style={color:'#4CAF50'}) #{changeFormatted} (#{percentChangeFormatted})
                else if (change < 0)
                    span(style={color:'#F44336'}) #{changeFormatted} (#{percentChangeFormatted})
                else
                    span(style={color:'#9E9E9E'}) #{changeFormatted} (#{percentChangeFormatted})
            h5.text-muted #{exchange}: #{ticker}

    .row
        .col-md-12
            hr
            div
                canvas(id='myChart')
    .row.justify-content-center.mt-3
        .col-md-5.col-12
            .form-group
                label(for='dateFrom') Date From
                input.form-control#dateFrom(type='date')
        .col-md-5.col-12
            .form-group
                label(for='dateTo') Date To
                input.form-control#dateTo(type='date')
        .col-md-2.col-12
            .form-group
                label(for='update') &nbsp
                button.form-control.btn.btn-outline-primary#update Update
    .row.justify-content-center.mt-3
        if !compare
            .col-md-2.text-center
                button(id='day').btn.btn-outline-primary.btn-block 1 Day
        .col-md-2.text-center
            button(id='oneM').btn.btn-outline-primary.btn-block 1 Month
        .col-md-2.text-center
            button(id='thrM').btn.btn-outline-primary.btn-block 3 Month
        .col-md-2.text-center
            button(id='year').btn.btn-outline-primary.btn-block 1 Year
        .col-md-2.text-center
            button(type='button', data-toggle='button', aria-pressed='false', autocomplete='off', id='autoFit').btn.btn-primary.btn-block Auto Fit (On)


    if user && user.darkTheme
        script.
            var darkMode = true;
    else
        script.
            var darkMode = false;
    script.
        function getIndexOfClosestDay(date, dateArray) {
            const target = new Date(date);
            let wasBefore = false;
            for (let i = 0; i < dateArray.length; i++) {
                const currentDay = new Date(dateArray[i].x);
                if (dateArray[i].x === date) {
                    return i;
                }
                if (target < currentDay && !wasBefore) {
                    return i;
                }
            }
            return -1;
        }
        function getIndexOfDay(date, array) {
            for (let i = 0; i < array.length; i++) {
                if (array[i].x === date) {
                    return i;
                }
            }
            return -1;
        }
        window.onload = function() {

          var dayData = !{chartDay};
          var monthData = !{chartMonth};
          var threeMonthData = !{chartThrMonth};
          var yearData = !{chartYear};
          var dayData2 = !{chartDay2};
          var monthData2 = !{chartMonth2};
          var threeMonthData2 = !{chartThrMonth2};
          var yearData2 = !{chartYear2};
          var validDayGraph = !{validDayGraph};
          var defaultGraph = (validDayGraph) ? dayData : monthData;
          $('#dateFrom').val((validDayGraph) ? dayData[0].x.split(' ')[0]  : yearData[0].x);
          $('#dateTo').val((validDayGraph) ? dayData[0].x.split(' ')[0]  : yearData[yearData.length-1].x);
          var baseline = {
            label: 'Previous Close',
            fill: false,
            data: !{baseline},
            borderColor: [
              '#212121'
            ],
            borderDash: [10, 5],
            borderWidth: 1,
            pointRadius: 0
          }

          var ctx = document.getElementById("myChart").getContext('2d');
          Chart.defaults.global.defaultFontColor = darkMode ? 'rgba(255,255,255,0.9)' : 'rgba(0,0,0,0.9)';
          Chart.defaults.scale.gridLines.color = darkMode ? 'rgba(255,255,255,0.3)' : 'rgba(0,0,0,0.3)';
          Chart.defaults.scale.gridLines.drawBorder = false;
          baseline.borderColor = darkMode ? 'rgba(255,255,255,0.5)' : 'rgba(0,0,0,0.5)';
          var myChart = new Chart(ctx, {
            type: 'line',
            data: {
              labels: ["Stock Price"],
              datasets: [{
                label: '!{ticker}',
                fill: 2,
                lineTension: 0,
                data: defaultGraph,
                borderColor: [
                  !{chartColor}
                ],
                borderWidth: 2,
                pointRadius: 0
              }]
            },
            options: {
              spanGaps: true,
              scales: {
                xAxes:[{
                  type: 'time',
                  display: true,
                  scaleLabel: {
                    display: true,
                    labelString: "Time"
                  },
                  ticks: {
                      autoSkip: true,
                      autoSkipPadding: 50,
                  },
                }],
                yAxes: [{
                  scaleLabel: {
                    display: true,
                    labelString: ('#{compare}' !== '') ? "Percent Gain" : "Price ($)"
                  }
                }]
              }
            }
          });
          var ct = document.getElementById("yearChart").getContext('2d');
          var yearChart = new Chart(ct, {
            type: 'line',
            data: {
              labels: ["Stock Price"],
              datasets: [{
                label: 'Dividend and Splits in Past Year',
                fill: 2,
                lineTension: 0,
                data: !{chartYear},
                borderColor: [
                  (darkMode ? 'rgba(255,255,255,0.9)' : 'rgba(0,0,0,0.9)')
                ],
                borderWidth: false,
                pointRadius: 0
              }]
            },
            options: {
              spanGaps: true,
              scales: {
                xAxes: [{
                  type: 'time',
                  display: true,
                  scaleLabel: {
                    display: true,
                    labelString: "Date"
                  },
                  ticks: {
                    autoSkip: true,
                    autoSkipPadding: 50,
                  },
                }],
                yAxes: [{
                  scaleLabel: {
                    display: true,
                    labelString: ('#{compare}' !== '') ? "Percent Gain" : "Price ($)"
                  }
                }]
              },
              annotation: {
                annotations: !{annotations}
              }

            }
          });
          if ('!{compare}' !== '') {
            const defaultGraph2 = (validDayGraph) ? dayData2 : monthData2;
            const newColor2 = (defaultGraph2[0].y-defaultGraph2[defaultGraph2.length-1].y < 0) ? '#4CAF50' : '#F44336';
            myChart.data.datasets.push({
                label: '!{compare}',
                fill: 2,
                lineTension: 0,
                data: defaultGraph2,
                borderColor: newColor2,
                borderWidth: 2,
                pointRadius: 0,
                borderDash: [3, 3]
            });
            myChart.update();
          }
          $('#day').click(function () {
            if(!validDayGraph) {
              alert('There is no data for today\'s trading');
              return;
            }
            $('#dateFrom').val(dayData[0].x.split(' ')[0]);
            $('#dateTo').val(dayData[0].x.split(' ')[0]);
            $('#update').click();
          });
          $('#oneM').click(function () {
            $('#dateFrom').val(monthData[0].x);
            $('#dateTo').val(monthData[monthData.length-1].x);
            $('#update').click();
          });
          $('#thrM').click(function () {
            $('#dateFrom').val(threeMonthData[0].x);
            $('#dateTo').val(threeMonthData[threeMonthData.length-1].x);
            $('#update').click();
          });
          $('#year').click(function () {
            $('#dateFrom').val(yearData[0].x);
            $('#dateTo').val(yearData[yearData.length-1].x);
            $('#update').click();
          });
          $('#autoFit').click(function () {
              if (myChart.options.scales.yAxes[0].ticks.beginAtZero) {
                  myChart.options.scales.yAxes[0].ticks.beginAtZero = false;
                  $(this).text("Auto Fit (On)");
              } else {
                  myChart.options.scales.yAxes[0].ticks.beginAtZero = true;
                  $(this).text("Auto Fit (Off)");
              }
              myChart.update();
          });
          $('#update').click(function() {
              const today = new Date(yearData[yearData.length-1].x);
              const dateFromStr = $('#dateFrom').val();
              const dateToStr = $('#dateTo').val();
              const dateFrom = new Date(dateFromStr);
              const dateTo = new Date(dateToStr);
              const difference = Math.round(Math.abs((dateFrom.getTime() - dateTo.getTime())/(24*60*60*1000)));
              const differenceFromToday = Math.round(Math.abs((today.getTime() - dateFrom.getTime())/(24*60*60*1000)));
              
              if (differenceFromToday < 0) {
                  alert('The starting date cannot be after the current date.');
                  return;
              }
              if (differenceFromToday > 365) {
                  alert('Fiscus does not support data from over a year ago. Please choose dates within the past year.');
                  return;
              }
              if (difference < 0) {
                  //Do nothing, error
                  alert('The starting date cannot be after the ending date');
                  return;
              } else if (difference > 0) {
                  //Load daily graph
                  const indexOfClosestDateFrom = getIndexOfClosestDay(dateFromStr, yearData);
                  const indexOfClosestDateTo = getIndexOfClosestDay(dateToStr, yearData);
                  if (indexOfClosestDateFrom === -1) {
                      alert(`There's no data for ${dateFromStr}`);
                      return;
                  }
                  if (indexOfClosestDateTo === -1) {
                      alert(`There's no data for ${dateToStr}`);
                      return;
                  }
                  const newData = yearData.slice(indexOfClosestDateFrom, indexOfClosestDateTo+1);
                  const newColor = (newData[0].y-newData[newData.length-1].y < 0) ? '#4CAF50' : '#F44336';
                  myChart.data.datasets[0].data = newData;
                  myChart.data.datasets[0].borderColor = newColor;
                  myChart.data.datasets.splice(1, 2);
                  if ('!{compare}' !== '') {
                    const newData2 = yearData2.slice(indexOfClosestDateFrom, indexOfClosestDateTo+1);
                    const newColor2 = (newData2[0].y-newData2[newData2.length-1].y < 0) ? '#4CAF50' : '#F44336';
                    myChart.data.datasets.push({
                        label: '!{compare}',
                        fill: 2,
                        lineTension: 0,
                        data: yearData2.slice(indexOfClosestDateFrom, indexOfClosestDateTo+1),
                        borderColor: newColor2,
                        borderWidth: 2,
                        pointRadius: 0,
                        borderDash: [3, 3]
                    });
                  }
                  myChart.update();
              } else {
                  //Load intraday graph
                  if(!validDayGraph) {
                    alert('There is no data for today\'s trading');
                    return;
                  }
                  myChart.data.datasets[0].data = dayData;
                  myChart.data.datasets[0].label = '!{ticker}';
                  myChart.data.datasets.splice(1, 2);
                  if ('!{compare}' !== '') {
                    const newColor2 = (dayData2[0].y-dayData2[dayData2.length-1].y < 0) ? '#4CAF50' : '#F44336';
                    myChart.data.datasets.push({
                        label: '!{compare}',
                        fill: 2,
                        lineTension: 0,
                        data: dayData2,
                        borderColor: newColor2,
                        borderWidth: 2,
                        pointRadius: 0,
                        borderDash: [3, 3]
                    });
                  }
                  // this makes it crash for some reason, so it's commented out
                  //-   myChart.data.datasets.push(baseline);
                  myChart.update();
              }
          });
        };

    br
    if securityOwnershipInfo
        .row
            .col-md-12
                .card(style={margin: '10px 0 0 0'})
                    .card-body
                        - const numShares = securityOwnershipInfo.attributes.numShares;
                        - const value = formatMoney(securityOwnershipInfo.attributes.numShares*lastPrice);
                        - const profit = formatMoney(numShares*lastPrice-securityOwnershipInfo.attributes.costBasis*numShares);
                        - const profitPrefix = profit.includes('-') ? '' : '+';
                        h5.card-text You own: #{numShares} shares, $#{value} 
                            if profitPrefix == '+'
                                span(style={color:'#4CAF50'}) (#{profitPrefix}$#{profit})
                            else
                                span(style={color:'#F44336'}) (#{profitPrefix}$#{profit})
    br
    if transactions && transactions.length > 0
        .row
            .col-md-12
                .card(style={margin: '10px 0 0 0'})
                    .card-body
                        h5.card-text Transaction History
                        table.table.mb-0
                            thead
                                tr
                                    th(scope='col') Date
                                    th(scope='col') Type
                                    th(scope='col') Shares
                                    th(scope='col') Value
                            tbody
                                each transaction in transactions
                                    tr
                                        th(scope='row') #{transaction.attributes.dateTransacted.toISOString().substring(0,10)}
                                        td #{transaction.attributes.type}
                                        td #{transaction.attributes.numShares}
                                        td $#{transaction.attributes.value}
    br
    if user
        .row
            .col-md-12
                .card(style={margin: '10px 0 0 0'})
                    .card-body
                        h5.card-text Watchlist Status
                        if watchlist
                            p #{ticker} is currently in your watchlist. It was added on #{watchlist.dateAdded.toISOString().substring(0,10)} at the price of $#{watchlist.initialPrice}.
                            - const diff = (lastPrice - watchlist.initialPrice).toFixed(2)
                            - const diffPercentage = (100 * Math.abs((lastPrice - watchlist.initialPrice) / watchlist.initialPrice)).toFixed(2)
                            if diff > 0
                                p.mb-0 Since being added to your watchlist, #{ticker} has increased in value by: 
                                    span.green +#{diff} (#{diffPercentage}%)
                            else if (diff == 0)
                                p.mb-0 Since being added to your watchlist, #{ticker} has not changed in value. Note that #{ticker} may have changed in value and then returned to its initial value between the time you added #{ticker} to your watchlist and right now. 
                            else
                                p.mb-0 Since being added to your watchlist, #{ticker} has decreased in value by: 
                                    span.red #{diff} (#{diffPercentage}%)
                        else
                            p.mb-0 #{ticker} is not in your watchlist.
                    .card-footer.text-right
                        if watchlist
                            a.btn.btn.btn-primary(href="/watchlist/#{watchlist.id}/delete", id='watchlistButton') Remove from Watchlist
                        else
                            button.btn.btn-primary(onclick='addToWatchlist(\'#{ticker}\', #{lastPrice})', id='watchlistButton') Add To Watchlist
    br
    .row
        .col-md-6
            .card(style={margin: '10px 0 10px 0'})
                    .card-body
                        h5.card-title Market Data
                        hr
                        table.card-text.w-100
                            tbody
                                tr
                                    td Open
                                    td.text-right $#{formatMoney(open)}
                                tr
                                    td High
                                    td.text-right $#{formatMoney(high)}
                                tr
                                    td Low
                                    td.text-right $#{formatMoney(low)}
                                tr
                                    td Beta
                                    td.text-right #{keyStats.beta}
                                tr
                                    td 52 Week High
                                    td.text-right $#{formatMoney(keyStats.week52high)}
                                tr
                                    td 52 Week Low
                                    td.text-right $#{formatMoney(keyStats.week52low)}
                                tr
                                    td Market Capitalization
                                    td.text-right $#{formatMoney(keyStats.marketcap)}
                                
        .col-md-6
            .card(style={margin: '10px 0 10px 0'})
                    .card-body
                        h5.card-title Financials (Quarterly)
                        h6.card-subtitle.text-muted Last reported: #{financials.reportDate}
                        hr
                        table.card-text.w-100
                            tbody
                                tr
                                    td Revenue
                                    td.text-right $#{formatMoney(financials.totalRevenue)}
                                tr
                                    td Operating Revenue
                                    td.text-right $#{formatMoney(financials.operatingRevenue)}
                                tr
                                    td Cost of Revenue
                                    td.text-right $#{formatMoney(financials.costOfRevenue)}
                                tr
                                    td Net Income
                                    td.text-right $#{formatMoney(financials.netIncome)}
                                tr
                                    td Operating Income
                                    td.text-right $#{formatMoney(financials.operatingIncome)}
                                tr
                                    td Operating Expenses
                                    td.text-right $#{formatMoney(financials.operatingExpense)}
                                tr
                                    td Total Assets
                                    td.text-right $#{formatMoney(financials.totalAssets)}
                                tr
                                    td Total Liabilities
                                    td.text-right $#{formatMoney(financials.totalLiabilities)}
                                tr
                                    td Total Cash
                                    td.text-right $#{formatMoney(financials.totalCash)}
                                tr
                                    td Total Debt
                                    td.text-right $#{formatMoney(financials.totalDebt)}
                                tr
                                    td Cash Flow
                                    td.text-right $#{formatMoney(financials.cashFlow)}
    .row
        .col-md-12
            h3 News about #{ticker}
            hr
    .row
        each article in news
            .col-md-4
                .card(style={margin: '10px 0 10px 0'})
                    .card-body
                        h5.card-title 
                            a(style={color: 'inherit'},href=article.url) #{article.headline}
                        h6.card-subtitle.text-muted #{article.datetime.substring(0,10)}
                        hr
                        p.card-text #{article.summary}
                        a.card-link(href=article.url) Link to article

    .row
        .col-md-12
            hr
            canvas(id='yearChart')

    script.
        function addToWatchlist(ticker, price) {
            $('#watchlistButton').html('<i class="fas fa-spinner fa-pulse"></i>');
            $('#watchlistButton').toggleClass('disabled');
            $.ajax({
                type: "POST",
                url: "/watchlist/add",
                data: {ticker: ticker, price: price},
                dataType: 'json',
                success: function (data) {
                    if (data.success) {
                        $('#watchlistButton').toggleClass('btn-primary btn-success');
                        $('#watchlistButton').html('<i class="fas fa-check"></i>');
                        alert('The selected security was successfully added! Please refresh the page to see this change reflected on this page.');
                    }
                }
            });
        }
                


